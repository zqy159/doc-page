import{_ as s,c as a,o as t,ai as e}from"./chunks/framework.Ch_4mUWj.js";const c=JSON.parse('{"title":"Vite","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"front/tools/vite.md","filePath":"front/tools/vite.md"}'),n={name:"front/tools/vite.md"};function h(l,i,p,r,k,o){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h1><h2 id="什么是-vite" tabindex="-1">什么是 Vite? <a class="header-anchor" href="#什么是-vite" aria-label="Permalink to &quot;什么是 Vite?&quot;">​</a></h2><p>Vite 是一个基于 原生 ES 模块 的前端构建工具，由 Vue.js 作者尤雨溪开发，主打「极速启动」和「按需编译」，显著优化了开发体验。</p><h2 id="vite-的原理" tabindex="-1">vite 的原理 <a class="header-anchor" href="#vite-的原理" aria-label="Permalink to &quot;vite 的原理&quot;">​</a></h2><p>借用作者的原话：“Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打包。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。” Vite 的实现离不开现代浏览器原生支持的模块功能。如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./a.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当声明一个 script 标签类型为 module 时，浏览器对其内部的 import 引用发起 HTTP 请求获取模块内容。比如上述，浏览器将发起一个对 HOST/a.js 的 HTTP 请求，获取到内容之后再执行。 Vite 劫持了这些请求，并在后端进行相应的处理（比如将 Vue 文件拆分成 template、style、script 三个部分），然后再返回浏览器。由于浏览器只会对用到的模块发起 HTTP 请求，所以 Vite 没必要对项目里的所有文件先打包后返回，而是只编译浏览器发起 HTTP 请求的模块即可。</p><p>总体来说： Vite 在浏览器端使用的是 export import 方式导入和导出的模块； vite 同时实现了按需加载； Vite<code>高度依赖module script特性</code>。</p><h2 id="核心特点" tabindex="-1">核心特点 <a class="header-anchor" href="#核心特点" aria-label="Permalink to &quot;核心特点&quot;">​</a></h2><p>核心特点（对比传统工具）</p><p><strong>开发服务器快：</strong><br> 传统工具（如 Webpack）开发模式需全量打包，而 Vite 利用浏览器原生 ES 模块支持，按需编译代码，启动速度提升数十倍。<br><strong>热更新（HMR）高效</strong>：<br> Vite 的 HMR 直接更新模块级变更，无需刷新页面，复杂项目也能保持毫秒级反馈。<br><strong>依赖预构建：</strong><br> 通过 esbuild 将第三方依赖预编译为 ES 模块，减少浏览器解析开销。</p><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><p>现代浏览器项目（默认支持 ES 模块）。<br> 追求快速启动和开发效率的中大型应用（尤其适合 Vue/React 单页应用）。<br> 需要与 TypeScript、JSX 等现代语法无缝集成的场景。</p><h2 id="vite-的基本使用" tabindex="-1">vite 的基本使用 <a class="header-anchor" href="#vite-的基本使用" aria-label="Permalink to &quot;vite 的基本使用&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h2 id="vite-脚手架使用" tabindex="-1">vite 脚手架使用 <a class="header-anchor" href="#vite-脚手架使用" aria-label="Permalink to &quot;vite 脚手架使用&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span></span></code></pre></div>`,17)]))}const g=s(n,[["render",h]]);export{c as __pageData,g as default};
