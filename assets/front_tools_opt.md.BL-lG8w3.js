import{_ as o,c as e,o as r,ai as a}from"./chunks/framework.DTqeMNVv.js";const S=JSON.parse('{"title":"性能优化","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"front/tools/opt.md","filePath":"front/tools/opt.md"}'),l={name:"front/tools/opt.md"};function n(i,t,s,d,c,g){return r(),e("div",null,t[0]||(t[0]=[a('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><p>前端性能优化的核心是提升用户体验，通过缩短首屏时间、提高渲染流畅度、减少资源消耗，让页面更快、更流畅、更省流量</p><h2 id="优化方向" tabindex="-1">优化方向 <a class="header-anchor" href="#优化方向" aria-label="Permalink to &quot;优化方向&quot;">​</a></h2><h3 id="资源加载优化" tabindex="-1">资源加载优化 <a class="header-anchor" href="#资源加载优化" aria-label="Permalink to &quot;资源加载优化&quot;">​</a></h3><ul><li>减少请求：合并文件（CSS/JS/雪碧图）、代码分割按需加载、清理冗余代码。</li><li>压缩传输：启用Gzip/Brotli压缩、图片转WebP/AVIF格式、CDN加速。</li><li>智能加载：预加载关键资源（<code>&lt;link rel=&quot;preload&quot;&gt;</code>）、懒加载非关键内容（loading=&quot;lazy&quot;）。</li></ul><p><strong>1. 减少HTTP请求数量</strong><br> 合并压缩：通过Webpack/Gulp等工具合并CSS/JS文件，使用雪碧图（CSS Sprites）整合小图标，减少请求次数。 代码分割：按路由或功能拆分代码（如Webpack的SplitChunksPlugin），实现按需加载。 清理冗余：移除无效链接、未使用的CSS/JS代码及注释，减少文件体积。<br><strong>2. 压缩与传输优化</strong><br> Gzip/Brotli压缩：服务器端启用压缩（如Nginx的gzip_static），Brotli相比Gzip可减少14%-21%的文件体积。 图片压缩：使用TinyPNG、Squoosh等工具压缩图片，优先采用WebP/AVIF格式（WebP比PNG小26%，AVIF比JPEG小50%）。<br><strong>3. CDN与缓存策略</strong><br> CDN加速：将静态资源部署至CDN（如阿里云OSS、Cloudflare），利用多域名并发提升加载速度。 缓存配置：设置Cache-Control: max-age=31536000实现长缓存，结合ETag/Last-Modified验证缓存有效性。<br><strong>4. 预加载与懒加载</strong><br> 预加载关键资源：通过<link rel="preload">提前加载首屏关键CSS/JS，或使用dns-prefetch预解析域名。 懒加载非关键资源：对图片、视频使用loading=&quot;lazy&quot;属性或Intersection Observer API实现滚动加载。</p><h3 id="渲染性能优化" tabindex="-1">渲染性能优化 <a class="header-anchor" href="#渲染性能优化" aria-label="Permalink to &quot;渲染性能优化&quot;">​</a></h3><ul><li>CSS优化：避免阻塞渲染（CSS放<code>&lt;head&gt;</code>）、动画用transform/opacity、减少复杂选择器。</li><li>JS优化：减少DOM操作（批量更新/虚拟DOM）、事件委托、异步加载第三方脚本。</li><li>防抖节流：高频事件（如滚动、输入）用防抖（Debounce）或节流（Throttle）控制频率。</li></ul><p><strong>1. CSS优化</strong> 避免阻塞渲染：将CSS放在<code>&lt;head&gt;</code>中，避免使用@import导致后续资源加载延迟。 动画优化：使用CSS3动画（如transform和opacity）替代JS动画，利用GPU加速（will-change: transform）。 选择器效率：减少通配符*和深层选择器（如.nav ul li a），优先使用ID选择器。<br><strong>2. JavaScript优化</strong> 减少DOM操作：批量更新DOM（如DocumentFragment或innerHTML），避免频繁读写布局属性（如offsetWidth）。 事件委托：将事件监听器绑定到父元素，利用冒泡机制减少事件处理函数数量。 异步加载：第三方脚本使用async（不阻塞渲染）或defer（按顺序执行），避免阻塞主线程。<br><strong>3. 减少重绘与回流</strong> 批量样式修改：通过修改class替代直接操作style，合并多次样式变更。 虚拟DOM：使用React/Vue等框架的虚拟DOM机制，减少直接DOM操作。 防抖节流：对高频事件（如滚动、输入）使用防抖（Debounce）或节流（Throttle）控制执行频率。</p><p><strong>回流:</strong> 当dom的变化，影响到了该元素在浏览器上的几何位置，导致页面重新布局和排列<br> （1） 添加，删除，和更新dom节点， （2） 使用display:none属性<br><strong>重绘:</strong> 当dom的变化只是外观发生了改变,没影响到页面的重新布局 （1）改变样式<br><strong>防抖:</strong> 是“等你不动了再执行” 延迟执行直至事件停止时触发,适用于避免重复操作。<br><strong>节流:</strong> 是“按固定频率执行”。限定执行频率,适用于控制高频事件执行间隔。<br><strong>如何优化和减少回流和重绘:</strong><br> （1）批量改变样式，改变class<br> （2）减少dom的操作<br> （3）使用文档碎片,合并操作插入到文档流中<br> （4）使用position：absolute 和fixed属性，脱离文档流不会影响其他元素的布局<br> （5）使用虚拟dom<br> （6）使用table布局<br> （7）避免频繁改变窗口</p><h3 id="图片与媒体优化" tabindex="-1">图片与媒体优化 <a class="header-anchor" href="#图片与媒体优化" aria-label="Permalink to &quot;图片与媒体优化&quot;">​</a></h3><ul><li>响应式图片：srcset+sizes适配不同分辨率，SVG替代小图标。</li><li>懒加载实践：长列表用虚拟滚动（如React Window），结合骨架屏提升体验。</li></ul><p><strong>1. 响应式图片</strong><br> 使用srcset和sizes属性根据设备分辨率加载合适图片，结合<code>&lt;picture&gt;</code>标签提供多格式支持。 采用SVG替代位图（如Logo、图标），支持无损缩放和样式控制。<br><strong>2. 懒加载实践</strong><br> 对长列表图片使用虚拟滚动（如React Window），仅渲染可视区域内容。 结合骨架屏（Skeleton Screen）提升加载体验，避免页面“抖动”。</p><h3 id="构建与部署优化" tabindex="-1">构建与部署优化 <a class="header-anchor" href="#构建与部署优化" aria-label="Permalink to &quot;构建与部署优化&quot;">​</a></h3><ul><li>Tree Shaking：移除未使用代码（如Webpack的mode: production）。</li><li>服务端渲染（SSR）：用Next.js/Nuxt.js提升首屏SEO和速度。</li><li>字体优化：WOFF2格式+子集化，预加载关键字体避免闪动。</li></ul><p><strong>1. Tree Shaking与动态导入</strong> 通过ES模块移除未使用代码（如Webpack的mode: production），减少打包体积。 路由级懒加载（如React.lazy()、Vue异步组件），按需加载模块。<br><strong>2. 服务端渲染（SSR）与静态生成（SSG）</strong> 使用Next.js/Nuxt.js实现SSR，提升首屏SEO和加载速度。 对静态页面采用SSG（如Gatsby），减少服务端渲染开销。<br><strong>3. 字体优化</strong> 使用WOFF2格式字体，子集化（Subset）仅保留必要字符。 预加载关键字体（如<code>&lt;link rel=&quot;preload&quot; as=&quot;font&quot;&gt;</code>），避免FOIT（Flash of Invisible Text）。</p><h3 id="体验与监控" tabindex="-1">体验与监控 <a class="header-anchor" href="#体验与监控" aria-label="Permalink to &quot;体验与监控&quot;">​</a></h3><ul><li>交互优化：用骨架屏/Loading动画替代白屏，避免空src属性。</li><li>性能监控：定期用Lighthouse审计指标（如LCP、FID），结合RUM工具监控真实用户数据。</li></ul><p><strong>1. 交互优化</strong> 使用骨架屏或Loading动画，提升用户感知性能。 避免空src属性（如<code>&lt;img src=&quot;&quot;</code>&gt;），防止触发无效请求。<br><strong>2. 性能监控</strong> 通过Lighthouse、WebPageTest定期审计性能指标（如LCP、FID）。 结合RUM（Real User Monitoring）工具（如Sentry、New Relic）监控真实用户性能数据。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>前端性能优化需结合具体场景选择策略，例如电商网站侧重首屏加载速度，可通过SSR+CDN+懒加载实现；管理后台强调交互流畅度，需优化DOM操作和事件处理。持续使用性能工具监控并迭代优化，方能构建高效、流畅的前端体验。</p>',21)]))}const b=o(l,[["render",n]]);export{S as __pageData,b as default};
